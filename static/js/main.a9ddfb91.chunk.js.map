{"version":3,"sources":["Position.js","Line.js","Commands.js","Game.js","App.js","registerServiceWorker.js","index.js"],"names":["Position","props","react_default","a","createElement","className","position","imgs","map","_ref","src","key","alt","Line","minPosition","Math","min","bluePosition","blueParachute","redPosition","redParachute","maxPosition","max","positions","Object","toConsumableArray","Array","keys","i","src_Position","push","positionToImages","Commands","commands","blueIndex","redIndex","split","command","index","Game","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","blue","commandIndex","red","play","handleClick","bind","assertThisInitialized","togglePlay","move","skipIf","indexTo","actions","L","R","S","0","1","2","3","4","5","6","7","8","9","_this2","setState","prevState","clearInterval","setInterval","tick","won","length","robotColor","letter","nullFunction","direction","_this3","_prevState$robotColor","lastPosition","defineProperty","concat","_this4","_prevState$robotColor2","nextIndex","_this5","src_Commands","onClick","src_Line","Component","App","started","handleChange","handleSubmit","e","target","value","toUpperCase","filter","indexOf","slice","join","preventDefault","src_Game","onSubmit","onChange","href","rel","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a9ddfb91.chunk.js","sourcesContent":["import React from 'react';\n\nconst Position = (props) => {\n  return (\n    <div className=\"position\">\n      <div className=\"number\">\n        {props.position}\n      </div>\n      {props.imgs.map(({src, className, key}) => (\n        <img key={key} src={src} className={className} alt='' />\n      ))}\n    </div>\n  )\n}\n\nexport default Position\n","import React from 'react';\n\nimport Position from './Position.js'\n\nconst Line = (props) => {\n  const minPosition = Math.min(props.bluePosition, props.blueParachute, props.redPosition, props.redParachute) - 2\n  const maxPosition = Math.max(props.bluePosition, props.blueParachute, props.redPosition, props.redParachute) + 2\n  const positions = [...Array(maxPosition - minPosition).keys()].map((i) => i + minPosition)\n\n  const positionToImages = position => {\n    let imgs = []\n    if (position === props.blueParachute) {\n      imgs.push({src: 'parachute.png', className: '', key: 'pb'})\n    }\n    if (position === props.redParachute) {\n      imgs.push({src: 'parachute.png', className: '', key: 'pr'})\n    }\n    if (position === props.bluePosition) {\n      imgs.push({src: 'bot.png', className: 'blue', key: 'bb'})\n    }\n    if (position === props.redPosition) {\n      imgs.push({src: 'bot.png', className: 'red', key: 'br'})\n    }\n    return imgs\n  }\n\n  return (\n    <div className=\"line\">\n      {positions.map((position) => <Position key={position} position={position} imgs={positionToImages(position)}/>)}\n    </div>\n  )\n}\n\nexport default Line\n","import React from 'react';\n\nconst Commands = ({commands, blueIndex, redIndex}) => {\n  return (\n    <div>\n      <div className='line'>\n        {commands.split('').map((command, index) => (\n          <div key={index} className=\"position no-margin\" >\n            <div className=\"number\">\n              {index}\n            </div>\n            {index === blueIndex ? <img className='blue' alt=''/> : null}\n            {index === redIndex ? <img className='red' alt=''/> : null}\n            <div className=\"command\">\n              {command}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Commands\n","import React, { Component } from 'react';\nimport Line from './Line.js';\nimport Commands from './Commands.js';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      commands: props.commands,\n      blue: {\n        commandIndex: 0,\n        positions: [props.bluePosition]\n      },\n      red: {\n        commandIndex: 0,\n        positions: [props.redPosition]\n      },\n      play: false\n    }\n    this.handleClick = this.handleClick.bind(this)\n    this.togglePlay = this.togglePlay.bind(this)\n    this.move = this.move.bind(this)\n    this.skipIf = this.skipIf.bind(this)\n    this.indexTo = this.indexTo.bind(this)\n    this.actions = {\n      'L': this.move(-1),\n      'R': this.move(+1),\n      'S': this.skipIf(),\n      0: this.indexTo(0),\n      1: this.indexTo(1),\n      2: this.indexTo(2),\n      3: this.indexTo(3),\n      4: this.indexTo(4),\n      5: this.indexTo(5),\n      6: this.indexTo(6),\n      7: this.indexTo(7),\n      8: this.indexTo(8),\n      9: this.indexTo(9),\n    }\n  }\n\n  togglePlay() {\n    this.setState(prevState => {\n      let play\n      if (prevState.play) {\n        clearInterval(prevState.play)\n        play = false\n      } else {\n        play = setInterval(()=>{\n          this.tick(\"red\")\n          this.tick(\"blue\")\n          if (this.won()) {\n            this.togglePlay()\n          }\n        }, 1000)\n      }\n      return {play}\n    })\n  }\n\n  handleClick() {\n    if (this.won()) return\n    // console.log(this.state)\n    this.tick(\"red\")\n    this.tick(\"blue\")\n  }\n\n  won() {\n    return this.state.blue.positions[this.state.blue.positions.length - 1] === this.state.red.positions[this.state.red.positions.length - 1]\n  }\n\n  tick(robotColor) {\n    const letter = this.state.commands[this.state[robotColor].commandIndex]\n    const action = this.actions[letter] || this.nullFunction\n    action(robotColor)\n  }\n\n  nullFunction () {}\n\n  move (direction) {\n    return (robotColor) => {\n      // console.log(\"move\", direction, robotColor)\n      this.setState((prevState) => {\n        const {commandIndex, positions} = prevState[robotColor]\n        const lastPosition = positions[positions.length - 1]\n        return {[robotColor]: {\n          commandIndex: commandIndex + 1,\n          positions: positions.concat(lastPosition + direction),\n        }}\n      })\n    }\n  }\n\n  skipIf () {\n    return (robotColor) => {\n      // console.log(\"skipIf\", robotColor)\n      this.setState((prevState) => {\n        const {commandIndex, positions} = prevState[robotColor]\n        const lastPosition = positions[positions.length - 1]\n        const nextIndex = lastPosition === prevState.blue.positions[0] || lastPosition === prevState.red.positions[0] ? commandIndex + 2 : commandIndex + 1\n        return {[robotColor]: {\n          commandIndex: nextIndex,\n          positions: positions.concat(lastPosition),\n        }}\n      })\n    }\n  }\n\n  indexTo (index) {\n    return (robotColor) => {\n      // console.log(\"indexTo\", index, robotColor)\n      this.setState((prevState) => {\n        const {positions} = prevState[robotColor]\n        const lastPosition = positions[positions.length - 1]\n        return {[robotColor]: {\n          commandIndex: index,\n          positions: positions.concat(lastPosition),\n        }}\n      })\n    }\n  }\n\n  render() {\n    const won = this.won()\n    return (\n      <div className=\"Game\">\n        <Commands\n          commands={this.state.commands}\n          blueIndex={this.state.blue.commandIndex}\n          redIndex={this.state.red.commandIndex}\n        />\n        <div>Turn # {this.state.blue.positions.length}</div>\n        {\n          won ?\n          <div>You won!</div> :\n          <button onClick={this.togglePlay}>{this.state.play ? \"Stop\" : \"Auto Play\"}</button>\n        }\n        <br/>\n        <br/>\n\n        <Line\n          bluePosition={this.state.blue.positions[this.state.blue.positions.length - 1]}\n          redPosition={this.state.red.positions[this.state.red.positions.length - 1]}\n          blueParachute={this.state.blue.positions[0]}\n          redParachute={this.state.red.positions[0]}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\n\nimport Game from './Game.js'\n\n// LS0LLLLLL3\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      commands: \"\",\n      started: false\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    const value = e.target.value;\n    const commands = value.toUpperCase().split(\"\").filter((letter) => [\"L\", \"R\", \"S\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"].indexOf(letter) > -1).slice(0,10).join(\"\")\n    this.setState({ commands });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.setState({\n      started: true\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <h1 className=\"title\">\n            <img src='bot.png' alt='' />&nbsp;\n            Robots on a<br/>\n            Number Line\n            &nbsp;<img src='parachute.png' alt='' />\n          </h1>\n        </header>\n        <br/>\n        <br/>\n          {\n            this.state.started ? (\n              <Game bluePosition={0} redPosition={5} commands={this.state.commands} />\n            ) : (\n              <form onSubmit={this.handleSubmit}>\n                <input\n                  onChange={this.handleChange}\n                  value={this.state.commands}\n                />\n                <button>\n                  Set commands and start\n                </button>\n                <p>\n                  Two robots are parachuted onto a spot of a discrete number line that stretches infinitely in either direction.\n                  They are an unknown distance apart.\n                  Where they land, they drop their parachute.\n                  They begin executing the same set of instructions at the same time.\n                  Unfortunately, these are not very good robots, and they only understand commands in character form.\n                  There is only room for 10 instructions. Possible instructions are as follows:\n                </p>\n                <p>\n                  L: Move left one space<br/>\n                  R: Move right one space<br/>\n                  S: Skip the next instruction if and only if there is a parachute at my feet<br/>\n                  0-9: Move to this position in the instructions (If the instructions are LRS1, the 1 would move the robot back to the 'R')<br/>\n                </p>\n                <p>\n                  Every step takes the same amount of time to execute, including parachute skips and moving through the instructions.\n                  There is no variable storage.\n                  The robots begin executing from step 0.\n                  What set of instructions will result in the two robots ultimately finding each other on the infinite number line in every case?\n                  There are multiple possible answers.\n                </p>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n              </form>\n            )\n          }\n        <footer>\n          Simple implementation of XKCD Puzzle &nbsp;\n          <a href=\"http://wiki.xkcd.com/irc/Puzzles#Robots_on_a_number_line\" target=\"_blank\" rel=\"noopener noreferrer\">\n            Robots on a number line\n          </a>. &nbsp;\n          <a href=\"https://carlomartinucci.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\">\n            Carlo Martinucci\n          </a>, 2017\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}